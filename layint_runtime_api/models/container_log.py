# coding: utf-8

"""
    Layered Witness & Control

    LI Witness provides deep insight and analytics into containerized applications. Control provides dynamic runtime security and analytics for containerized applications. You can find out more about the Layered Insight Suite at [http://layeredinsight.com](http://layeredinsight.com).

    OpenAPI spec version: 0.9.6
    Contact: help@layeredinsight.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ContainerLog(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'message_type': 'int',
        'process_id': 'int',
        'process_name': 'str',
        'system_call': 'int',
        'system_call_name': 'str',
        'action': 'int',
        'file_name': 'str',
        'date_created': 'str'
    }

    attribute_map = {
        'id': 'ID',
        'message_type': 'MessageType',
        'process_id': 'ProcessID',
        'process_name': 'ProcessName',
        'system_call': 'SystemCall',
        'system_call_name': 'SystemCallName',
        'action': 'Action',
        'file_name': 'FileName',
        'date_created': 'DateCreated'
    }

    def __init__(self, id=None, message_type=None, process_id=None, process_name=None, system_call=None, system_call_name=None, action=None, file_name=None, date_created=None):
        """
        ContainerLog - a model defined in Swagger
        """

        self._id = None
        self._message_type = None
        self._process_id = None
        self._process_name = None
        self._system_call = None
        self._system_call_name = None
        self._action = None
        self._file_name = None
        self._date_created = None

        if id is not None:
          self.id = id
        if message_type is not None:
          self.message_type = message_type
        if process_id is not None:
          self.process_id = process_id
        if process_name is not None:
          self.process_name = process_name
        if system_call is not None:
          self.system_call = system_call
        if system_call_name is not None:
          self.system_call_name = system_call_name
        if action is not None:
          self.action = action
        if file_name is not None:
          self.file_name = file_name
        if date_created is not None:
          self.date_created = date_created

    @property
    def id(self):
        """
        Gets the id of this ContainerLog.
        12 character internal hexadecimal identifier for this log

        :return: The id of this ContainerLog.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ContainerLog.
        12 character internal hexadecimal identifier for this log

        :param id: The id of this ContainerLog.
        :type: str
        """

        self._id = id

    @property
    def message_type(self):
        """
        Gets the message_type of this ContainerLog.
        Number representing the type of log this is. 2 for \"action\" logs, 3 for \"behavioral\" logs

        :return: The message_type of this ContainerLog.
        :rtype: int
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """
        Sets the message_type of this ContainerLog.
        Number representing the type of log this is. 2 for \"action\" logs, 3 for \"behavioral\" logs

        :param message_type: The message_type of this ContainerLog.
        :type: int
        """

        self._message_type = message_type

    @property
    def process_id(self):
        """
        Gets the process_id of this ContainerLog.
        UNIX process id of the process that generated the log

        :return: The process_id of this ContainerLog.
        :rtype: int
        """
        return self._process_id

    @process_id.setter
    def process_id(self, process_id):
        """
        Sets the process_id of this ContainerLog.
        UNIX process id of the process that generated the log

        :param process_id: The process_id of this ContainerLog.
        :type: int
        """

        self._process_id = process_id

    @property
    def process_name(self):
        """
        Gets the process_name of this ContainerLog.
        Name of the process that generated the log

        :return: The process_name of this ContainerLog.
        :rtype: str
        """
        return self._process_name

    @process_name.setter
    def process_name(self, process_name):
        """
        Sets the process_name of this ContainerLog.
        Name of the process that generated the log

        :param process_name: The process_name of this ContainerLog.
        :type: str
        """

        self._process_name = process_name

    @property
    def system_call(self):
        """
        Gets the system_call of this ContainerLog.
        Number representing the system call that generated this log entry

        :return: The system_call of this ContainerLog.
        :rtype: int
        """
        return self._system_call

    @system_call.setter
    def system_call(self, system_call):
        """
        Sets the system_call of this ContainerLog.
        Number representing the system call that generated this log entry

        :param system_call: The system_call of this ContainerLog.
        :type: int
        """

        self._system_call = system_call

    @property
    def system_call_name(self):
        """
        Gets the system_call_name of this ContainerLog.
        String representation of the system call that generated this log entry

        :return: The system_call_name of this ContainerLog.
        :rtype: str
        """
        return self._system_call_name

    @system_call_name.setter
    def system_call_name(self, system_call_name):
        """
        Sets the system_call_name of this ContainerLog.
        String representation of the system call that generated this log entry

        :param system_call_name: The system_call_name of this ContainerLog.
        :type: str
        """

        self._system_call_name = system_call_name

    @property
    def action(self):
        """
        Gets the action of this ContainerLog.
        Number representing the action taken on the function call that generated this log. 0 for deny, 1 for allow.

        :return: The action of this ContainerLog.
        :rtype: int
        """
        return self._action

    @action.setter
    def action(self, action):
        """
        Sets the action of this ContainerLog.
        Number representing the action taken on the function call that generated this log. 0 for deny, 1 for allow.

        :param action: The action of this ContainerLog.
        :type: int
        """

        self._action = action

    @property
    def file_name(self):
        """
        Gets the file_name of this ContainerLog.
        Optional name of file that was being operated on in the function call that generated this log

        :return: The file_name of this ContainerLog.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """
        Sets the file_name of this ContainerLog.
        Optional name of file that was being operated on in the function call that generated this log

        :param file_name: The file_name of this ContainerLog.
        :type: str
        """

        self._file_name = file_name

    @property
    def date_created(self):
        """
        Gets the date_created of this ContainerLog.
        Timestamp for when this log was created

        :return: The date_created of this ContainerLog.
        :rtype: str
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """
        Sets the date_created of this ContainerLog.
        Timestamp for when this log was created

        :param date_created: The date_created of this ContainerLog.
        :type: str
        """

        self._date_created = date_created

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ContainerLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
