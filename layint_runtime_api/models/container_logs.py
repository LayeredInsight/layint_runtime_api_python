# coding: utf-8

"""
    Layered Control

    LI Control provides dynamic runtime security and analytics for containerized applications. You can find out more about the Layered Insight Suite at [http://layeredinsight.com](http://layeredinsight.com).

    OpenAPI spec version: 0.9.3
    Contact: help@layeredinsight.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ContainerLogs(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'page': 'int',
        'page_size': 'int',
        'prev_page': 'str',
        'next_page': 'str',
        'uri': 'str',
        'total_log_count': 'int',
        'log_data': 'list[ContainerLog]'
    }

    attribute_map = {
        'page': 'Page',
        'page_size': 'PageSize',
        'prev_page': 'PrevPage',
        'next_page': 'NextPage',
        'uri': 'Uri',
        'total_log_count': 'TotalLogCount',
        'log_data': 'LogData'
    }

    def __init__(self, page=None, page_size=None, prev_page=None, next_page=None, uri=None, total_log_count=None, log_data=None):
        """
        ContainerLogs - a model defined in Swagger
        """

        self._page = None
        self._page_size = None
        self._prev_page = None
        self._next_page = None
        self._uri = None
        self._total_log_count = None
        self._log_data = None

        if page is not None:
          self.page = page
        if page_size is not None:
          self.page_size = page_size
        if prev_page is not None:
          self.prev_page = prev_page
        if next_page is not None:
          self.next_page = next_page
        if uri is not None:
          self.uri = uri
        if total_log_count is not None:
          self.total_log_count = total_log_count
        if log_data is not None:
          self.log_data = log_data

    @property
    def page(self):
        """
        Gets the page of this ContainerLogs.
        Number describing what page of $PageSize logs is in this object

        :return: The page of this ContainerLogs.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """
        Sets the page of this ContainerLogs.
        Number describing what page of $PageSize logs is in this object

        :param page: The page of this ContainerLogs.
        :type: int
        """

        self._page = page

    @property
    def page_size(self):
        """
        Gets the page_size of this ContainerLogs.
        Number describing maximum number of logs are displayed per \"page\"

        :return: The page_size of this ContainerLogs.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """
        Sets the page_size of this ContainerLogs.
        Number describing maximum number of logs are displayed per \"page\"

        :param page_size: The page_size of this ContainerLogs.
        :type: int
        """

        self._page_size = page_size

    @property
    def prev_page(self):
        """
        Gets the prev_page of this ContainerLogs.
        URL to get previous page of logs from system

        :return: The prev_page of this ContainerLogs.
        :rtype: str
        """
        return self._prev_page

    @prev_page.setter
    def prev_page(self, prev_page):
        """
        Sets the prev_page of this ContainerLogs.
        URL to get previous page of logs from system

        :param prev_page: The prev_page of this ContainerLogs.
        :type: str
        """

        self._prev_page = prev_page

    @property
    def next_page(self):
        """
        Gets the next_page of this ContainerLogs.
        URL to get next page of logs from system

        :return: The next_page of this ContainerLogs.
        :rtype: str
        """
        return self._next_page

    @next_page.setter
    def next_page(self, next_page):
        """
        Sets the next_page of this ContainerLogs.
        URL to get next page of logs from system

        :param next_page: The next_page of this ContainerLogs.
        :type: str
        """

        self._next_page = next_page

    @property
    def uri(self):
        """
        Gets the uri of this ContainerLogs.
        Uri that this set of data came from

        :return: The uri of this ContainerLogs.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """
        Sets the uri of this ContainerLogs.
        Uri that this set of data came from

        :param uri: The uri of this ContainerLogs.
        :type: str
        """

        self._uri = uri

    @property
    def total_log_count(self):
        """
        Gets the total_log_count of this ContainerLogs.
        Total number of logs for this container in the system

        :return: The total_log_count of this ContainerLogs.
        :rtype: int
        """
        return self._total_log_count

    @total_log_count.setter
    def total_log_count(self, total_log_count):
        """
        Sets the total_log_count of this ContainerLogs.
        Total number of logs for this container in the system

        :param total_log_count: The total_log_count of this ContainerLogs.
        :type: int
        """

        self._total_log_count = total_log_count

    @property
    def log_data(self):
        """
        Gets the log_data of this ContainerLogs.
        Array of logs for this \"page\" of results

        :return: The log_data of this ContainerLogs.
        :rtype: list[ContainerLog]
        """
        return self._log_data

    @log_data.setter
    def log_data(self, log_data):
        """
        Sets the log_data of this ContainerLogs.
        Array of logs for this \"page\" of results

        :param log_data: The log_data of this ContainerLogs.
        :type: list[ContainerLog]
        """

        self._log_data = log_data

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ContainerLogs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
