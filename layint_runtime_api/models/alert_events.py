# coding: utf-8

"""
    Layered Control

    LI Control provides dynamic runtime security and analytics for containerized applications. You can find out more about the Layered Insight Suite at [http://layeredinsight.com](http://layeredinsight.com).

    OpenAPI spec version: 0.9.4
    Contact: help@layeredinsight.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AlertEvents(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'events': 'float',
        'event_i_ds': 'list[str]'
    }

    attribute_map = {
        'id': 'ID',
        'events': 'Events',
        'event_i_ds': 'EventIDs'
    }

    def __init__(self, id=None, events=None, event_i_ds=None):
        """
        AlertEvents - a model defined in Swagger
        """

        self._id = None
        self._events = None
        self._event_i_ds = None

        if id is not None:
          self.id = id
        if events is not None:
          self.events = events
        if event_i_ds is not None:
          self.event_i_ds = event_i_ds

    @property
    def id(self):
        """
        Gets the id of this AlertEvents.
        Position of this event (basically an array key)

        :return: The id of this AlertEvents.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AlertEvents.
        Position of this event (basically an array key)

        :param id: The id of this AlertEvents.
        :type: float
        """

        self._id = id

    @property
    def events(self):
        """
        Gets the events of this AlertEvents.
        Number of events in this time period

        :return: The events of this AlertEvents.
        :rtype: float
        """
        return self._events

    @events.setter
    def events(self, events):
        """
        Sets the events of this AlertEvents.
        Number of events in this time period

        :param events: The events of this AlertEvents.
        :type: float
        """

        self._events = events

    @property
    def event_i_ds(self):
        """
        Gets the event_i_ds of this AlertEvents.
        12 character internal hexadecimal identifiers for Events in this time period

        :return: The event_i_ds of this AlertEvents.
        :rtype: list[str]
        """
        return self._event_i_ds

    @event_i_ds.setter
    def event_i_ds(self, event_i_ds):
        """
        Sets the event_i_ds of this AlertEvents.
        12 character internal hexadecimal identifiers for Events in this time period

        :param event_i_ds: The event_i_ds of this AlertEvents.
        :type: list[str]
        """

        self._event_i_ds = event_i_ds

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AlertEvents):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
