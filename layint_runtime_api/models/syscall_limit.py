# coding: utf-8

"""
    Layered Control

    LI Control provides dynamic runtime security and analytics for containerized applications. You can find out more about the Layered Insight Suite at [http://layeredinsight.com](http://layeredinsight.com).

    OpenAPI spec version: 0.9.3
    Contact: help@layeredinsight.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SyscallLimit(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'syscall_name': 'str',
        'rate_per_sec': 'int'
    }

    attribute_map = {
        'syscall_name': 'SyscallName',
        'rate_per_sec': 'RatePerSec'
    }

    def __init__(self, syscall_name=None, rate_per_sec=None):
        """
        SyscallLimit - a model defined in Swagger
        """

        self._syscall_name = None
        self._rate_per_sec = None

        if syscall_name is not None:
          self.syscall_name = syscall_name
        if rate_per_sec is not None:
          self.rate_per_sec = rate_per_sec

    @property
    def syscall_name(self):
        """
        Gets the syscall_name of this SyscallLimit.
        Name of system call to place a limit on

        :return: The syscall_name of this SyscallLimit.
        :rtype: str
        """
        return self._syscall_name

    @syscall_name.setter
    def syscall_name(self, syscall_name):
        """
        Sets the syscall_name of this SyscallLimit.
        Name of system call to place a limit on

        :param syscall_name: The syscall_name of this SyscallLimit.
        :type: str
        """

        self._syscall_name = syscall_name

    @property
    def rate_per_sec(self):
        """
        Gets the rate_per_sec of this SyscallLimit.
        Limit, in number of calls of specified system call per second. If limit is breached, alert is created. If value is 0, no enforcement happens.

        :return: The rate_per_sec of this SyscallLimit.
        :rtype: int
        """
        return self._rate_per_sec

    @rate_per_sec.setter
    def rate_per_sec(self, rate_per_sec):
        """
        Sets the rate_per_sec of this SyscallLimit.
        Limit, in number of calls of specified system call per second. If limit is breached, alert is created. If value is 0, no enforcement happens.

        :param rate_per_sec: The rate_per_sec of this SyscallLimit.
        :type: int
        """

        self._rate_per_sec = rate_per_sec

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SyscallLimit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
