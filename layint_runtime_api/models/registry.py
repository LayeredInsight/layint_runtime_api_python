# coding: utf-8

"""
    Layered Control

    LI Control provides dynamic runtime security and analytics for containerized applications. You can find out more about the Layered Insight Suite at [http://layeredinsight.com](http://layeredinsight.com).

    OpenAPI spec version: 0.9.5
    Contact: help@layeredinsight.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Registry(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'user_id': 'int',
        'group_id': 'int',
        'url': 'str',
        'type': 'str',
        'username': 'str',
        'password': 'str',
        'access_token': 'str'
    }

    attribute_map = {
        'id': 'ID',
        'name': 'Name',
        'user_id': 'UserId',
        'group_id': 'GroupId',
        'url': 'URL',
        'type': 'Type',
        'username': 'Username',
        'password': 'Password',
        'access_token': 'AccessToken'
    }

    def __init__(self, id=None, name=None, user_id=None, group_id=None, url=None, type=None, username=None, password=None, access_token=None):
        """
        Registry - a model defined in Swagger
        """

        self._id = None
        self._name = None
        self._user_id = None
        self._group_id = None
        self._url = None
        self._type = None
        self._username = None
        self._password = None
        self._access_token = None

        if id is not None:
          self.id = id
        if name is not None:
          self.name = name
        if user_id is not None:
          self.user_id = user_id
        if group_id is not None:
          self.group_id = group_id
        if url is not None:
          self.url = url
        if type is not None:
          self.type = type
        if username is not None:
          self.username = username
        if password is not None:
          self.password = password
        if access_token is not None:
          self.access_token = access_token

    @property
    def id(self):
        """
        Gets the id of this Registry.
        12 character internal hexadecimal identifier for this Registry

        :return: The id of this Registry.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Registry.
        12 character internal hexadecimal identifier for this Registry

        :param id: The id of this Registry.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Registry.
        Name to refer to registry with and display

        :return: The name of this Registry.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Registry.
        Name to refer to registry with and display

        :param name: The name of this Registry.
        :type: str
        """

        self._name = name

    @property
    def user_id(self):
        """
        Gets the user_id of this Registry.
        User ID of owner of the image

        :return: The user_id of this Registry.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this Registry.
        User ID of owner of the image

        :param user_id: The user_id of this Registry.
        :type: int
        """

        self._user_id = user_id

    @property
    def group_id(self):
        """
        Gets the group_id of this Registry.
        Group ID of owner of the image

        :return: The group_id of this Registry.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """
        Sets the group_id of this Registry.
        Group ID of owner of the image

        :param group_id: The group_id of this Registry.
        :type: int
        """

        self._group_id = group_id

    @property
    def url(self):
        """
        Gets the url of this Registry.
        URL to registry

        :return: The url of this Registry.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this Registry.
        URL to registry

        :param url: The url of this Registry.
        :type: str
        """

        self._url = url

    @property
    def type(self):
        """
        Gets the type of this Registry.
        Type of registry

        :return: The type of this Registry.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Registry.
        Type of registry

        :param type: The type of this Registry.
        :type: str
        """
        allowed_values = ["dtr", "ecr", "docker.io", "quay.io"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def username(self):
        """
        Gets the username of this Registry.
        Username credential for docker.io, dtr registries

        :return: The username of this Registry.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this Registry.
        Username credential for docker.io, dtr registries

        :param username: The username of this Registry.
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """
        Gets the password of this Registry.
        Password credential for docker.io, dtr registries

        :return: The password of this Registry.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this Registry.
        Password credential for docker.io, dtr registries

        :param password: The password of this Registry.
        :type: str
        """

        self._password = password

    @property
    def access_token(self):
        """
        Gets the access_token of this Registry.
        Access token credential for Quay registries

        :return: The access_token of this Registry.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """
        Sets the access_token of this Registry.
        Access token credential for Quay registries

        :param access_token: The access_token of this Registry.
        :type: str
        """

        self._access_token = access_token

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Registry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
