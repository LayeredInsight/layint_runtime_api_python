# coding: utf-8

"""
    Layered Control

    LI Control provides dynamic runtime security and analytics for containerized applications. You can find out more about the Layered Insight Suite at [http://layeredinsight.com](http://layeredinsight.com).

    OpenAPI spec version: 0.9.4
    Contact: help@layeredinsight.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class RegistryApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def add_registry(self, **kwargs):
        """
        Create new registry definition
        Creates a registry object which can then be used to specify where container images are stored. ID SHOULD NOT be passed when creating a new registry.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_registry(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Registry registry:
        :return: Registry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_registry_with_http_info(**kwargs)
        else:
            (data) = self.add_registry_with_http_info(**kwargs)
            return data

    def add_registry_with_http_info(self, **kwargs):
        """
        Create new registry definition
        Creates a registry object which can then be used to specify where container images are stored. ID SHOULD NOT be passed when creating a new registry.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_registry_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Registry registry:
        :return: Registry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registry']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_registry" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'registry' in params:
            body_params = params['registry']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Registries', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Registry',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_registry(self, registry_id, **kwargs):
        """
        Delete specified registry
        Deletes the specified registry.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_registry(registry_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registry_id: hexadecimal ID of registry to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_registry_with_http_info(registry_id, **kwargs)
        else:
            (data) = self.delete_registry_with_http_info(registry_id, **kwargs)
            return data

    def delete_registry_with_http_info(self, registry_id, **kwargs):
        """
        Delete specified registry
        Deletes the specified registry.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_registry_with_http_info(registry_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registry_id: hexadecimal ID of registry to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registry_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_registry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registry_id' is set
        if ('registry_id' not in params) or (params['registry_id'] is None):
            raise ValueError("Missing the required parameter `registry_id` when calling `delete_registry`")


        collection_formats = {}

        path_params = {}
        if 'registry_id' in params:
            path_params['registryID'] = params['registry_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Registries/{registryID}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_registries(self, **kwargs):
        """
        Get defined registries
        Returns a list of defined images that are accessible to this user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_registries(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: Registries
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_registries_with_http_info(**kwargs)
        else:
            (data) = self.get_registries_with_http_info(**kwargs)
            return data

    def get_registries_with_http_info(self, **kwargs):
        """
        Get defined registries
        Returns a list of defined images that are accessible to this user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_registries_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: Registries
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registries" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Registries', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Registries',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_registry(self, registry_id, **kwargs):
        """
        Get specified registry
        Returns details about the specified registry.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_registry(registry_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registry_id: hexadecimal ID of registry to get (required)
        :return: Registry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_registry_with_http_info(registry_id, **kwargs)
        else:
            (data) = self.get_registry_with_http_info(registry_id, **kwargs)
            return data

    def get_registry_with_http_info(self, registry_id, **kwargs):
        """
        Get specified registry
        Returns details about the specified registry.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_registry_with_http_info(registry_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registry_id: hexadecimal ID of registry to get (required)
        :return: Registry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registry_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registry_id' is set
        if ('registry_id' not in params) or (params['registry_id'] is None):
            raise ValueError("Missing the required parameter `registry_id` when calling `get_registry`")


        collection_formats = {}

        path_params = {}
        if 'registry_id' in params:
            path_params['registryID'] = params['registry_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Registries/{registryID}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Registry',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_registry_by_name(self, registry_name, **kwargs):
        """
        Get registry by name
        Returns details about a registry matching the passed name.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_registry_by_name(registry_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registry_name: Name of registry to get (required)
        :return: Registry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_registry_by_name_with_http_info(registry_name, **kwargs)
        else:
            (data) = self.get_registry_by_name_with_http_info(registry_name, **kwargs)
            return data

    def get_registry_by_name_with_http_info(self, registry_name, **kwargs):
        """
        Get registry by name
        Returns details about a registry matching the passed name.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_registry_by_name_with_http_info(registry_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registry_name: Name of registry to get (required)
        :return: Registry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registry_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registry_by_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registry_name' is set
        if ('registry_name' not in params) or (params['registry_name'] is None):
            raise ValueError("Missing the required parameter `registry_name` when calling `get_registry_by_name`")


        collection_formats = {}

        path_params = {}
        if 'registry_name' in params:
            path_params['registryName'] = params['registry_name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Registries/ByName/{registryName}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Registry',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def list_all_images_in_registry(self, registry_id, **kwargs):
        """
        Get container images in registry
        Returns an array of images which are definied as using the specified registry.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_all_images_in_registry(registry_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registry_id: hexadecimal ID of registry to get list of images for (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_all_images_in_registry_with_http_info(registry_id, **kwargs)
        else:
            (data) = self.list_all_images_in_registry_with_http_info(registry_id, **kwargs)
            return data

    def list_all_images_in_registry_with_http_info(self, registry_id, **kwargs):
        """
        Get container images in registry
        Returns an array of images which are definied as using the specified registry.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_all_images_in_registry_with_http_info(registry_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registry_id: hexadecimal ID of registry to get list of images for (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registry_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_all_images_in_registry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registry_id' is set
        if ('registry_id' not in params) or (params['registry_id'] is None):
            raise ValueError("Missing the required parameter `registry_id` when calling `list_all_images_in_registry`")


        collection_formats = {}

        path_params = {}
        if 'registry_id' in params:
            path_params['registryID'] = params['registry_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Registries/{registryID}/Images', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Image',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_registry(self, registry_id, **kwargs):
        """
        Update specified registry
        Updates the specified registry with data passed in request body.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_registry(registry_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registry_id: hexadecimal ID of registry to update (required)
        :param Registry registry:
        :return: Registry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_registry_with_http_info(registry_id, **kwargs)
        else:
            (data) = self.update_registry_with_http_info(registry_id, **kwargs)
            return data

    def update_registry_with_http_info(self, registry_id, **kwargs):
        """
        Update specified registry
        Updates the specified registry with data passed in request body.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_registry_with_http_info(registry_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registry_id: hexadecimal ID of registry to update (required)
        :param Registry registry:
        :return: Registry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registry_id', 'registry']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_registry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registry_id' is set
        if ('registry_id' not in params) or (params['registry_id'] is None):
            raise ValueError("Missing the required parameter `registry_id` when calling `update_registry`")


        collection_formats = {}

        path_params = {}
        if 'registry_id' in params:
            path_params['registryID'] = params['registry_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'registry' in params:
            body_params = params['registry']
        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Registries/{registryID}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Registry',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
